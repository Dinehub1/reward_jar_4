RewardJar 4.0 - Updates for /test/wallet-preview with Gym Membership Cards and Real-time Data Passing

Status: Proposal | Generated: July 20, 2025, 02:23 AM IST
Purpose: Enhance the /test/wallet-preview page to support testing gym membership cards (20 sessions for 15,000, with session usage tracking and expiry) and ensure real-time data passing for business QR code scans, with immediate updates and bidirectional synchronization across Apple Wallet, Google Wallet, and PWA.



ðŸ“‹ Current State

The /test/wallet-preview page, as described in test-wallet-preview.md, is a testing interface for RewardJar 4.0â€™s wallet integrations, focusing on loyalty cards. Current functionality includes:





Test Scenarios: Supports loyalty card scenarios (e.g., 0/10 stamps, 5/10, 10/10) with edge cases (e.g., Unicode names, missing data).



Wallet Support:





Apple Wallet: Generates .pkpass files via /api/wallet/apple/[CARD_ID].



Google Wallet: Creates JWT-based loyalty objects via /api/wallet/google/[CARD_ID].



PWA: Renders web-based cards via /api/wallet/pwa/[CARD_ID].



UI Features: Scenario dropdown, QR code preview, success/failure indicators, and debug logs.



API Integration:

curl http://localhost:3000/api/wallet/apple/[CARD_ID]?debug=true
curl http://localhost:3000/api/wallet/google/[CARD_ID]
curl http://localhost:3000/api/wallet/pwa/[CARD_ID]



Test Data:

curl -X POST http://localhost:3000/api/dev-seed -d '{"createAll": true}'

Limitations:





No Membership Card Support: Limited to loyalty cards (storeCard for Apple, LoyaltyObject for Google), with no support for gym membership cards (20 sessions, 15,000, session tracking, expiry).



No Real-time Data Passing: Lacks functionality to test QR code scans by businesses for session updates or stamp additions, and no bidirectional synchronization.



UI Constraints: No inputs for membership fields (e.g., sessions, cost) or QR scan simulation.



Backend Gaps: No endpoints to handle business-driven session updates or validate real-time synchronization.



ðŸŽ¯ Objectives





Gym Membership Card Testing: Enable testing of gym membership cards with 20 sessions, 15,000 cost, session usage tracking, and expiry date across all wallet types.



Real-time Data Passing: Ensure business QR code scans (to add stamps or mark sessions) trigger immediate updates in Apple Wallet, Google Wallet, and PWA, with bidirectional synchronization.



Enhanced UI: Add controls for membership attributes and QR scan simulation.



Robust Backend: Implement API endpoints and database triggers for session tracking and real-time updates.



Comprehensive Testing: Validate card rendering and data synchronization with automated and manual tests.



ðŸš€ Proposed Updates

1. UI Enhancements

Update the /test/wallet-preview page to support gym membership cards and data passing:





Scenario Selector: Add options for "Loyalty Card" and "Gym Membership Card".



Membership Fields:





Session count (default: 20).



Cost (default: 15,000).



Sessions used (editable for testing).



Expiry date (date picker).



Member name (text input).



Data Passing Controls:





Button to simulate business QR scan for session/stamp update.



Display for update status (e.g., "Session marked: 1/20").



Pass Preview: Show gym membership card mock-up with session progress and cost.



QR Code: Encode session data (e.g., gym:uuid:1/20) for business scanning.

2. Backend Changes





Database Schema: Add fields to customer_cards:

ALTER TABLE customer_cards
ADD COLUMN membership_type TEXT CHECK (membership_type IN ('loyalty', 'gym')),
ADD COLUMN total_sessions INTEGER DEFAULT 20,
ADD COLUMN sessions_used INTEGER DEFAULT 0,
ADD COLUMN cost NUMERIC DEFAULT 15000,
ADD COLUMN expiry_date TIMESTAMP WITH TIME ZONE;



New API Endpoints:





/api/wallet/mark-session/[customerCardId]: Handle business QR scan to mark session/stamp.



/api/wallet/test-update/[customerCardId]: Simulate session or stamp updates for testing.



/api/wallet/apple/updates/test/[customerCardId]: Test Apple Wallet APNs push.



/api/wallet/google/updates/test/[customerCardId]: Test Google Wallet API update.



/api/wallet/pwa/updates/test/[customerCardId]: Test PWA sync.

3. Test Scenarios

Add scenarios for gym membership cards and data passing:







Scenario



Wallet Type



Details



Expected Result





New Gym Membership



Apple



20 sessions, 15,000, expires 2026-07-20



.pkpass shows 0/20 sessions, cost





Session Marked (QR Scan)



Google



Business scans QR, marks 1 session



JWT updates, shows 1/20 sessions





Stamp Added (QR Scan)



Apple



Business scans QR, adds 1 stamp



.pkpass updates, shows 1/10 stamps





Expired Membership



PWA



Expiry 2025-07-19



Error: "Membership expired"





Full Session Usage



Google



Mark 20/20 sessions used



JWT shows "Membership complete"





Multi-Update



PWA



Mark 2 sessions + 1 stamp



å½¼æ­¤

System: stamp | All | Mark 2 sessions + 1 stamp | All wallets update, show 2/20 sessions, 1/10 stamps |

4. Data Passing Mechanism





Business QR Scan:





QR code format: gym:uuid:sessions_used:stamps or loyalty:uuid:stamps.



Business scans QR via /api/wallet/mark-session/[customerCardId], incrementing sessions_used or current_stamps.



Apple Wallet:





Send: Trigger update via APNs to webServiceURL (/api/wallet/apple/updates).



Receive: Wallet app requests updated .pkpass when notified.



Google Wallet:





Send: Update LoyaltyObject via Google Wallet API (PUT request).



Receive: Wallet app pulls updated JWT.



PWA:





Send: Update customer_cards via Supabase.



Receive: Real-time subscription refreshes UI and localStorage.



Bidirectional Sync:





Wallets notify RewardJar of user actions (e.g., pass refresh) via webServiceURL or API.



System pushes updates to wallets after QR scans.