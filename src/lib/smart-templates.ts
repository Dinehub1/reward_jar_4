/**
 * Smart Template System for Quick Card Creation
 * Provides industry-specific pre-configured templates with auto-generated content
 */

export interface SmartTemplate {
  id: string
  name: string
  description: string
  industry: string[]
  cardType: 'stamp_card' | 'membership_card'
  // Stamp Card specific fields
  defaultStampsRequired?: number
  smartRewardSuggestions?: string[]
  autoGeneratedMessages?: {
    cardDescription: string
    howToEarnStamp: string
    rewardDetails: string
    earnedStampMessage: string
    earnedRewardMessage: string
  }
  recommendedStampConfig?: {
    manualStampOnly: boolean
    minSpendAmount: number
    billProofRequired: boolean
    maxStampsPerDay: number
    duplicateVisitBuffer: '12h' | '1d' | 'none'
  }
  // Membership Card specific fields
  defaultTotalSessions?: number
  membershipType?: 'gym' | 'club' | 'subscription' | 'vip_access' | 'spa' | 'coworking'
  defaultDurationDays?: number
  smartCostSuggestions?: number[]
  autoGeneratedMembershipMessages?: {
    cardDescription: string
    howToUseCard: string
    membershipDetails: string
    sessionUsedMessage: string
    membershipExpiredMessage: string
  }
  recommendedMembershipConfig?: {
    autoSessionTracking: boolean
    accessControl: boolean
    allowGuestAccess: boolean
    sessionBuffer: '1h' | '2h' | '1d'
    membershipTier: 'basic' | 'standard' | 'premium' | 'vip'
  }
  // Common design settings
  designSettings: {
    cardColor: string
    iconEmoji: string
    barcodeType: 'QR_CODE' | 'PDF417'
  }
}

export interface MembershipTemplate extends Omit<SmartTemplate, 'cardType'> {
  cardType: 'membership_card'
  defaultTotalSessions: number
  membershipType: 'gym' | 'club' | 'subscription' | 'vip_access' | 'spa' | 'coworking'
  defaultDurationDays: number
  smartCostSuggestions: number[]
  autoGeneratedMembershipMessages: {
    cardDescription: string
    howToUseCard: string
    membershipDetails: string
    sessionUsedMessage: string
    membershipExpiredMessage: string
  }
  recommendedMembershipConfig: {
    autoSessionTracking: boolean
    accessControl: boolean
    allowGuestAccess: boolean
    sessionBuffer: '1h' | '2h' | '1d'
    membershipTier: 'basic' | 'standard' | 'premium' | 'vip'
  }
}

export interface StampTemplate extends Omit<SmartTemplate, 'cardType'> {
  cardType: 'stamp_card'
  defaultStampsRequired: number
  smartRewardSuggestions: string[]
  autoGeneratedMessages: {
    cardDescription: string
    howToEarnStamp: string
    rewardDetails: string
    earnedStampMessage: string
    earnedRewardMessage: string
  }
  recommendedStampConfig: {
    manualStampOnly: boolean
    minSpendAmount: number
    billProofRequired: boolean
    maxStampsPerDay: number
    duplicateVisitBuffer: '12h' | '1d' | 'none'
  }
}

export const SMART_TEMPLATES: SmartTemplate[] = [
  // =====================================
  // STAMP CARD TEMPLATES
  // =====================================
  {
    id: 'coffee-shop',
    name: 'Coffee Shop',
    description: 'Perfect for cafes, coffee shops, and beverage stores',
    industry: ['food-beverage', 'cafe', 'restaurant'],
    cardType: 'stamp_card',
    defaultStampsRequired: 10,
    smartRewardSuggestions: [
      'Free Coffee',
      'Free Drink',
      'Free Pastry',
      '20% Off Next Order',
      'Buy 1 Get 1 Free',
      'Free Breakfast Combo'
    ],
    autoGeneratedMessages: {
      cardDescription: 'Collect stamps with every purchase and enjoy delicious rewards',
      howToEarnStamp: 'Buy any drink to earn a stamp',
      rewardDetails: 'Valid for any size coffee, dine-in or takeaway',
      earnedStampMessage: 'Great! Just {#} more stamps to earn your free coffee',
      earnedRewardMessage: 'Congratulations! Your free coffee is ready to claim'
    },
    recommendedStampConfig: {
      manualStampOnly: true,
      minSpendAmount: 0,
      billProofRequired: false,
      maxStampsPerDay: 3,
      duplicateVisitBuffer: '12h'
    },
    designSettings: {
      cardColor: '#8B4513',
      iconEmoji: '‚òï',
      barcodeType: 'QR_CODE'
    }
  },
  {
    id: 'restaurant',
    name: 'Restaurant',
    description: 'Great for restaurants, dining, and food service businesses',
    industry: ['restaurant', 'dining', 'food-service'],
    cardType: 'stamp_card',
    defaultStampsRequired: 8,
    smartRewardSuggestions: [
      'Free Main Course',
      'Free Appetizer',
      'Free Dessert',
      '25% Off Your Bill',
      'Complimentary Starter',
      'Free Birthday Meal'
    ],
    autoGeneratedMessages: {
      cardDescription: 'Dine with us regularly and unlock delicious rewards',
      howToEarnStamp: 'Spend ‚Çπ500 or more to earn a stamp',
      rewardDetails: 'Valid for main course items up to ‚Çπ800 value',
      earnedStampMessage: 'Excellent! Only {#} more visits to earn your free meal',
      earnedRewardMessage: 'Amazing! Your complimentary meal awaits you'
    },
    recommendedStampConfig: {
      manualStampOnly: true,
      minSpendAmount: 500,
      billProofRequired: true,
      maxStampsPerDay: 1,
      duplicateVisitBuffer: '1d'
    },
    designSettings: {
      cardColor: '#FF6347',
      iconEmoji: 'üçï',
      barcodeType: 'QR_CODE'
    }
  },
  {
    id: 'salon-spa',
    name: 'Salon & Spa',
    description: 'Ideal for beauty salons, spas, and wellness services',
    industry: ['beauty', 'wellness', 'spa', 'salon'],
    cardType: 'stamp_card',
    defaultStampsRequired: 6,
    smartRewardSuggestions: [
      'Free Haircut',
      'Free Facial',
      'Free Manicure',
      '30% Off Next Service',
      'Complimentary Treatment',
      'Free Spa Package'
    ],
    autoGeneratedMessages: {
      cardDescription: 'Pamper yourself and earn beautiful rewards with every visit',
      howToEarnStamp: 'Book any service to earn a stamp',
      rewardDetails: 'Valid for haircut, basic facial, or manicure service',
      earnedStampMessage: 'Beautiful! Just {#} more services to earn your reward',
      earnedRewardMessage: 'Perfect! Your complimentary beauty treatment is ready'
    },
    recommendedStampConfig: {
      manualStampOnly: true,
      minSpendAmount: 1000,
      billProofRequired: false,
      maxStampsPerDay: 1,
      duplicateVisitBuffer: '1d'
    },
    designSettings: {
      cardColor: '#FF69B4',
      iconEmoji: 'üíÖ',
      barcodeType: 'QR_CODE'
    }
  },
  {
    id: 'retail-store',
    name: 'Retail Store',
    description: 'Perfect for retail shops, boutiques, and shopping centers',
    industry: ['retail', 'shopping', 'fashion', 'accessories'],
    cardType: 'stamp_card',
    defaultStampsRequired: 12,
    smartRewardSuggestions: [
      '20% Discount',
      'Free Item',
      '‚Çπ500 Off Next Purchase',
      'Buy 2 Get 1 Free',
      'VIP Shopping Day',
      'Exclusive Early Access'
    ],
    autoGeneratedMessages: {
      cardDescription: 'Shop more, save more with our exclusive loyalty rewards',
      howToEarnStamp: 'Spend ‚Çπ1000 or more to earn a stamp',
      rewardDetails: 'Valid on regular priced items, cannot combine with other offers',
      earnedStampMessage: 'Fantastic! Only {#} more purchases to unlock your discount',
      earnedRewardMessage: 'Wonderful! Your exclusive discount is now available'
    },
    recommendedStampConfig: {
      manualStampOnly: true,
      minSpendAmount: 1000,
      billProofRequired: true,
      maxStampsPerDay: 2,
      duplicateVisitBuffer: '12h'
    },
    designSettings: {
      cardColor: '#32CD32',
      iconEmoji: 'üõçÔ∏è',
      barcodeType: 'QR_CODE'
    }
  },
  {
    id: 'fitness-gym',
    name: 'Fitness & Gym',
    description: 'Great for gyms, fitness centers, and sports facilities',
    industry: ['fitness', 'gym', 'sports', 'health'],
    cardType: 'stamp_card',
    defaultStampsRequired: 15,
    smartRewardSuggestions: [
      'Free Personal Training',
      'Free Group Class',
      'Protein Shake',
      'Free Week Extension',
      'Guest Pass',
      'Fitness Assessment'
    ],
    autoGeneratedMessages: {
      cardDescription: 'Stay consistent with your fitness journey and earn rewards',
      howToEarnStamp: 'Complete a workout session to earn a stamp',
      rewardDetails: '1-hour personal training session with certified trainer',
      earnedStampMessage: 'Strong work! {#} more sessions to earn your reward',
      earnedRewardMessage: 'Champion! Your free training session is booked'
    },
    recommendedStampConfig: {
      manualStampOnly: true,
      minSpendAmount: 0,
      billProofRequired: false,
      maxStampsPerDay: 1,
      duplicateVisitBuffer: '1d'
    },
    designSettings: {
      cardColor: '#FF4500',
      iconEmoji: 'üèãÔ∏è',
      barcodeType: 'QR_CODE'
    }
  },
  {
    id: 'healthcare',
    name: 'Healthcare',
    description: 'Professional templates for clinics, hospitals, and medical services',
    industry: ['healthcare', 'medical', 'clinic', 'dental'],
    cardType: 'stamp_card',
    defaultStampsRequired: 5,
    smartRewardSuggestions: [
      'Free Consultation',
      'Health Checkup',
      'Diagnostic Discount',
      'Free Follow-up Visit',
      'Wellness Package',
      'Preventive Care Bonus'
    ],
    autoGeneratedMessages: {
      cardDescription: 'Prioritize your health and benefit from our patient loyalty program',
      howToEarnStamp: 'Complete an appointment to earn a stamp',
      rewardDetails: 'Valid for consultation or basic health screening',
      earnedStampMessage: 'Thank you for choosing us! {#} more visits for your reward',
      earnedRewardMessage: 'Excellent! Your complimentary health service is scheduled'
    },
    recommendedStampConfig: {
      manualStampOnly: true,
      minSpendAmount: 0,
      billProofRequired: false,
      maxStampsPerDay: 1,
      duplicateVisitBuffer: '1d'
    },
    designSettings: {
      cardColor: '#4169E1',
      iconEmoji: 'üè•',
      barcodeType: 'QR_CODE'
    }
  },

  // =====================================
  // MEMBERSHIP CARD TEMPLATES
  // =====================================
  {
    id: 'gym-membership',
    name: 'Gym Membership',
    description: 'Perfect for fitness centers, gyms, and sports facilities',
    industry: ['fitness', 'gym', 'sports', 'health'],
    cardType: 'membership_card',
    membershipType: 'gym',
    defaultTotalSessions: 20,
    defaultDurationDays: 30,
    smartCostSuggestions: [2000, 3000, 5000, 8000, 12000],
    autoGeneratedMembershipMessages: {
      cardDescription: 'Unlimited access to our premium fitness facilities',
      howToUseCard: 'Show this card at reception for gym access and session tracking',
      membershipDetails: 'Includes access to all equipment, group classes, and locker facilities',
      sessionUsedMessage: 'Session recorded! {#} sessions remaining this month',
      membershipExpiredMessage: 'Your membership has expired. Renew to continue your fitness journey'
    },
    recommendedMembershipConfig: {
      autoSessionTracking: true,
      accessControl: true,
      allowGuestAccess: false,
      sessionBuffer: '2h',
      membershipTier: 'standard'
    },
    designSettings: {
      cardColor: '#FF4500',
      iconEmoji: 'üèãÔ∏è',
      barcodeType: 'QR_CODE'
    }
  },
  {
    id: 'club-membership',
    name: 'Club Membership',
    description: 'Ideal for exclusive clubs, social clubs, and member organizations',
    industry: ['club', 'social', 'exclusive', 'dining'],
    cardType: 'membership_card',
    membershipType: 'club',
    defaultTotalSessions: 12,
    defaultDurationDays: 365,
    smartCostSuggestions: [5000, 10000, 25000, 50000],
    autoGeneratedMembershipMessages: {
      cardDescription: 'Exclusive access to our premium club facilities and services',
      howToUseCard: 'Present this card for access to club facilities and member services',
      membershipDetails: 'Includes dining privileges, event access, and exclusive member benefits',
      sessionUsedMessage: 'Welcome! You have {#} visits remaining this year',
      membershipExpiredMessage: 'Your membership requires renewal for continued access'
    },
    recommendedMembershipConfig: {
      autoSessionTracking: false,
      accessControl: true,
      allowGuestAccess: true,
      sessionBuffer: '1d',
      membershipTier: 'premium'
    },
    designSettings: {
      cardColor: '#8B5CF6',
      iconEmoji: 'üèõÔ∏è',
      barcodeType: 'QR_CODE'
    }
  },
  {
    id: 'spa-membership',
    name: 'Spa Membership',
    description: 'Perfect for spas, wellness centers, and therapy services',
    industry: ['spa', 'wellness', 'beauty', 'therapy'],
    cardType: 'membership_card',
    membershipType: 'spa',
    defaultTotalSessions: 8,
    defaultDurationDays: 90,
    smartCostSuggestions: [3000, 6000, 12000, 20000],
    autoGeneratedMembershipMessages: {
      cardDescription: 'Unlimited wellness and relaxation with our spa membership',
      howToUseCard: 'Show this card when booking treatments and accessing spa facilities',
      membershipDetails: 'Includes access to spa facilities, relaxation areas, and member pricing',
      sessionUsedMessage: 'Treatment complete! {#} sessions remaining this quarter',
      membershipExpiredMessage: 'Your spa membership needs renewal for continued wellness benefits'
    },
    recommendedMembershipConfig: {
      autoSessionTracking: true,
      accessControl: false,
      allowGuestAccess: false,
      sessionBuffer: '1h',
      membershipTier: 'premium'
    },
    designSettings: {
      cardColor: '#FF69B4',
      iconEmoji: 'üßò',
      barcodeType: 'QR_CODE'
    }
  },
  {
    id: 'coworking-membership',
    name: 'Coworking Membership',
    description: 'Great for coworking spaces, shared offices, and business centers',
    industry: ['coworking', 'office', 'workspace', 'business'],
    cardType: 'membership_card',
    membershipType: 'coworking',
    defaultTotalSessions: 25,
    defaultDurationDays: 30,
    smartCostSuggestions: [2500, 5000, 8000, 15000],
    autoGeneratedMembershipMessages: {
      cardDescription: 'Flexible workspace access with our coworking membership',
      howToUseCard: 'Scan this card at the entrance for workspace access and desk booking',
      membershipDetails: 'Includes desk access, meeting rooms, wifi, and business amenities',
      sessionUsedMessage: 'Check-in successful! {#} days remaining this month',
      membershipExpiredMessage: 'Your coworking membership has expired. Renew for continued access'
    },
    recommendedMembershipConfig: {
      autoSessionTracking: true,
      accessControl: true,
      allowGuestAccess: true,
      sessionBuffer: '1h',
      membershipTier: 'standard'
    },
    designSettings: {
      cardColor: '#10B981',
      iconEmoji: 'üíº',
      barcodeType: 'QR_CODE'
    }
  }
]

/**
 * Generate card content based on template and business context
 */
export const generateCardContent = (
  businessName: string,
  template: SmartTemplate,
  customReward?: string,
  customCost?: number
) => {
  if (template.cardType === 'stamp_card') {
    const reward = customReward || template.smartRewardSuggestions?.[0] || 'Free Reward'
    
    return {
      cardType: 'stamp_card' as const,
      cardDescription: template.autoGeneratedMessages?.cardDescription || '',
      howToEarnStamp: template.autoGeneratedMessages?.howToEarnStamp || '',
      rewardDetails: template.autoGeneratedMessages?.rewardDetails?.replace('{business}', businessName) || '',
      earnedStampMessage: template.autoGeneratedMessages?.earnedStampMessage?.replace('{reward}', reward) || '',
      earnedRewardMessage: template.autoGeneratedMessages?.earnedRewardMessage?.replace('{reward}', reward) || '',
      cardColor: template.designSettings.cardColor,
      iconEmoji: template.designSettings.iconEmoji,
      stampConfig: template.recommendedStampConfig,
      stampsRequired: template.defaultStampsRequired || 10,
      reward
    }
  } else {
    const cost = customCost || template.smartCostSuggestions?.[0] || 1000
    
    return {
      cardType: 'membership_card' as const,
      cardDescription: template.autoGeneratedMembershipMessages?.cardDescription || '',
      howToUseCard: template.autoGeneratedMembershipMessages?.howToUseCard || '',
      membershipDetails: template.autoGeneratedMembershipMessages?.membershipDetails?.replace('{business}', businessName) || '',
      sessionUsedMessage: template.autoGeneratedMembershipMessages?.sessionUsedMessage || '',
      membershipExpiredMessage: template.autoGeneratedMembershipMessages?.membershipExpiredMessage || '',
      cardColor: template.designSettings.cardColor,
      iconEmoji: template.designSettings.iconEmoji,
      membershipConfig: template.recommendedMembershipConfig,
      totalSessions: template.defaultTotalSessions || 10,
      durationDays: template.defaultDurationDays || 30,
      membershipType: template.membershipType || 'gym',
      cost
    }
  }
}

/**
 * Get industry-specific color suggestions
 */
export const getIndustryColor = (industry: string): string => {
  const colorMap: Record<string, string> = {
    'food-beverage': '#8B4513', // Coffee brown
    'restaurant': '#FF6347',    // Tomato red
    'beauty': '#FF69B4',        // Hot pink
    'retail': '#32CD32',        // Lime green
    'fitness': '#FF4500',       // Orange red
    'healthcare': '#4169E1',    // Royal blue
    'default': '#8B4513'        // Coffee brown
  }
  
  return colorMap[industry] || colorMap.default
}

/**
 * Get smart suggestions based on business type
 */
export const getSmartSuggestions = (industry: string, cardType: 'stamp_card' | 'membership_card' = 'stamp_card') => {
  const template = SMART_TEMPLATES.find(t => t.industry.includes(industry) && t.cardType === cardType)
  if (cardType === 'stamp_card') {
    return template?.smartRewardSuggestions || []
  } else {
    return template?.smartCostSuggestions || []
  }
}

/**
 * Get templates by card type
 */
export const getTemplatesByCardType = (cardType: 'stamp_card' | 'membership_card') => {
  return SMART_TEMPLATES.filter(template => template.cardType === cardType)
}

/**
 * Get stamp card templates only
 */
export const getStampCardTemplates = (): StampTemplate[] => {
  return SMART_TEMPLATES.filter(template => template.cardType === 'stamp_card') as StampTemplate[]
}

/**
 * Get membership card templates only
 */
export const getMembershipCardTemplates = (): MembershipTemplate[] => {
  return SMART_TEMPLATES.filter(template => template.cardType === 'membership_card') as MembershipTemplate[]
}