#!/usr/bin/env node

/**
 * Apple Wallet Pass Generator for RewardJar 4.0
 * Generates .pkpass files for testing wallet integration
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const archiver = require('archiver');

// Environment variables for Apple Pass signing
const APPLE_PASS_SIGNING_CERT = process.env.APPLE_PASS_SIGNING_CERT;
const APPLE_PASS_SIGNING_KEY = process.env.APPLE_PASS_SIGNING_KEY;
const APPLE_PASS_TYPE_ID = process.env.APPLE_PASS_TYPE_ID || 'pass.com.rewardjar.loyaltycard';
const APPLE_TEAM_ID = process.env.APPLE_TEAM_ID || 'YOUR_TEAM_ID';

/**
 * Generate a sample stamp card pass for testing
 */
function generateStampCardPass() {
  const passId = `stamp-${Date.now()}`;
  
  return {
    formatVersion: 1,
    passTypeIdentifier: APPLE_PASS_TYPE_ID,
    serialNumber: passId,
    teamIdentifier: APPLE_TEAM_ID,
    organizationName: "RewardJar Test Business",
    description: "Test Loyalty Card",
    backgroundColor: "rgb(139, 92, 246)", // Purple from RewardJar theme
    foregroundColor: "rgb(255, 255, 255)",
    labelColor: "rgb(255, 255, 255)",
    logoText: "Test Coffee Shop",
    
    // Store card style (similar to loyalty card)
    storeCard: {
      primaryFields: [
        {
          key: "stamps",
          label: "Stamps",
          value: "3 of 10"
        }
      ],
      secondaryFields: [
        {
          key: "reward",
          label: "Reward",
          value: "Free Medium Coffee"
        }
      ],
      auxiliaryFields: [
        {
          key: "expires",
          label: "Expires",
          value: "2025-12-31"
        }
      ],
      backFields: [
        {
          key: "terms",
          label: "Terms & Conditions",
          value: "This is a test pass generated by RewardJar wallet validation tools. Valid for testing purposes only."
        }
      ]
    },
    
    // Barcode for scanning
    barcodes: [
      {
        message: `REWARDJAR-TEST-${passId}`,
        format: "PKBarcodeFormatQR",
        messageEncoding: "iso-8859-1"
      }
    ],
    
    // Apple Wallet app integration
    associatedStoreIdentifiers: [],
    
    // Web service URLs (optional for testing)
    // webServiceURL: "https://your-api.rewardjar.app/wallet",
    // authenticationToken: crypto.randomBytes(16).toString('hex')
  };
}

/**
 * Generate a sample membership card pass for testing
 */
function generateMembershipCardPass() {
  const passId = `membership-${Date.now()}`;
  
  return {
    formatVersion: 1,
    passTypeIdentifier: APPLE_PASS_TYPE_ID,
    serialNumber: passId,
    teamIdentifier: APPLE_TEAM_ID,
    organizationName: "RewardJar Test Gym",
    description: "Test Membership Card",
    backgroundColor: "rgb(34, 197, 94)", // Green for membership
    foregroundColor: "rgb(255, 255, 255)",
    labelColor: "rgb(255, 255, 255)",
    logoText: "Test Fitness Center",
    
    // Generic card style for membership
    generic: {
      primaryFields: [
        {
          key: "membership",
          label: "Membership",
          value: "Gold Member"
        }
      ],
      secondaryFields: [
        {
          key: "memberId",
          label: "Member ID",
          value: "TEST-12345"
        },
        {
          key: "expires",
          label: "Expires",
          value: "2025-12-31"
        }
      ],
      backFields: [
        {
          key: "benefits",
          label: "Benefits",
          value: "24/7 access, guest privileges, personal training discount"
        },
        {
          key: "terms",
          label: "Terms & Conditions",  
          value: "This is a test membership pass generated by RewardJar wallet validation tools."
        }
      ]
    },
    
    barcodes: [
      {
        message: `REWARDJAR-MEMBER-${passId}`,
        format: "PKBarcodeFormatQR",
        messageEncoding: "iso-8859-1"
      }
    ]
  };
}

/**
 * Create manifest.json with file hashes
 */
function createManifest(files) {
  const manifest = {};
  
  for (const [filename, content] of Object.entries(files)) {
    const hash = crypto.createHash('sha1').update(content).digest('hex');
    manifest[filename] = hash;
  }
  
  return JSON.stringify(manifest, null, 2);
}

/**
 * Generate a basic icon (placeholder)
 */
function generatePlaceholderIcon() {
  // In a real implementation, you would create proper PNG files
  // For testing, we'll create a minimal placeholder
  return Buffer.from('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChAGA6VNPpQAAAABJRU5ErkJggg==', 'base64');
}

/**
 * Sign the pass (placeholder - requires actual Apple certificates)
 */
async function signPass(manifestContent) {
  if (!APPLE_PASS_SIGNING_CERT || !APPLE_PASS_SIGNING_KEY) {
    console.warn('⚠️  Apple signing certificates not provided - creating unsigned pass for structure testing');
    return Buffer.from('UNSIGNED_SIGNATURE_FOR_TESTING_ONLY');
  }
  
  // In a real implementation, you would use the Apple certificates to sign
  // This is a placeholder for testing the pass structure
  try {
    const signer = crypto.createSign('sha256');
    signer.update(manifestContent);
    
    // This would normally use your Apple private key
    const signature = signer.sign(APPLE_PASS_SIGNING_KEY, 'base64');
    return Buffer.from(signature, 'base64');
  } catch (error) {
    console.warn('⚠️  Signing failed, creating test signature:', error.message);
    return Buffer.from('TEST_SIGNATURE_' + crypto.randomBytes(32).toString('hex'));
  }
}

/**
 * Create a .pkpass file
 */
async function createPkpass(passData, outputPath) {
  const files = {
    'pass.json': JSON.stringify(passData, null, 2),
    'icon.png': generatePlaceholderIcon(),
    'icon@2x.png': generatePlaceholderIcon(),
    'logo.png': generatePlaceholderIcon(),
    'logo@2x.png': generatePlaceholderIcon()
  };
  
  // Create manifest
  const manifestContent = createManifest(files);
  files['manifest.json'] = manifestContent;
  
  // Sign the manifest
  const signature = await signPass(manifestContent);
  files['signature'] = signature;
  
  // Create ZIP archive (.pkpass)
  return new Promise((resolve, reject) => {
    const output = fs.createWriteStream(outputPath);
    const archive = archiver('zip', { zlib: { level: 9 } });
    
    output.on('close', () => {
      console.log(`✅ Created ${outputPath} (${archive.pointer()} bytes)`);
      resolve();
    });
    
    archive.on('error', reject);
    archive.pipe(output);
    
    // Add all files to the archive
    for (const [filename, content] of Object.entries(files)) {
      archive.append(content, { name: filename });
    }
    
    archive.finalize();
  });
}

/**
 * Main execution
 */
async function main() {
  console.log('🎫 RewardJar Apple Wallet Pass Generator');
  console.log('=====================================');
  
  try {
    // Ensure output directory exists
    const outputDir = path.join(__dirname, '../../artifacts');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    // Generate stamp card pass
    console.log('📱 Generating stamp card pass...');
    const stampPass = generateStampCardPass();
    const stampPassPath = path.join(outputDir, 'test-stamp-card.pkpass');
    await createPkpass(stampPass, stampPassPath);
    
    // Generate membership card pass
    console.log('💳 Generating membership card pass...');
    const membershipPass = generateMembershipCardPass();
    const membershipPassPath = path.join(outputDir, 'test-membership-card.pkpass');
    await createPkpass(membershipPass, membershipPassPath);
    
    console.log('\n✅ Pass generation complete!');
    console.log(`📁 Files created in: ${outputDir}`);
    console.log('📋 Test these passes by:');
    console.log('   1. Opening them on an iOS device/simulator');
    console.log('   2. Checking structure with unzip/inspection tools');
    console.log('   3. Validating JSON schema compliance');
    
    // Save pass data for inspection
    fs.writeFileSync(
      path.join(outputDir, 'generated-pass-data.json'),
      JSON.stringify({ stampPass, membershipPass }, null, 2)
    );
    
  } catch (error) {
    console.error('❌ Pass generation failed:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = {
  generateStampCardPass,
  generateMembershipCardPass,
  createPkpass
};